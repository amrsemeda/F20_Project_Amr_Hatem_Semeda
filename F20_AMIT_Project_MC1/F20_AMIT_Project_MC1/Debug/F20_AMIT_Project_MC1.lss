
F20_AMIT_Project_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000478  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012dc  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009bf  00000000  00000000  00001924  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a4e  00000000  00000000  000022e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  00002d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000563  00000000  00000000  00002ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000799  00000000  00000000  00003457  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003bf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ff 01 	call	0x3fe	; 0x3fe <main>
  8a:	0c 94 3a 02 	jmp	0x474	; 0x474 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPin_Direction>:

#include "DIO.h"

void DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_Direction direction)
{
	switch (direction)
  92:	44 23       	and	r20, r20
  94:	19 f0       	breq	.+6      	; 0x9c <DIO_SetPin_Direction+0xa>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	c9 f1       	breq	.+114    	; 0x10c <DIO_SetPin_Direction+0x7a>
  9a:	08 95       	ret
	{
		case DIO_INPUT:
		switch (port)
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	91 f0       	breq	.+36     	; 0xc4 <DIO_SetPin_Direction+0x32>
  a0:	28 f0       	brcs	.+10     	; 0xac <DIO_SetPin_Direction+0x1a>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	d9 f0       	breq	.+54     	; 0xdc <DIO_SetPin_Direction+0x4a>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	29 f1       	breq	.+74     	; 0xf4 <DIO_SetPin_Direction+0x62>
  aa:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPin_Direction+0x26>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPin_Direction+0x22>
  bc:	80 95       	com	r24
  be:	82 23       	and	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
			break;
  c2:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
  c4:	27 b3       	in	r18, 0x17	; 23
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_SetPin_Direction+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_SetPin_Direction+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
			break;
  da:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
  dc:	24 b3       	in	r18, 0x14	; 20
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPin_Direction+0x56>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPin_Direction+0x52>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	84 bb       	out	0x14, r24	; 20
			break;
  f2:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
  f4:	21 b3       	in	r18, 0x11	; 17
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_SetPin_Direction+0x6e>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_SetPin_Direction+0x6a>
 104:	80 95       	com	r24
 106:	82 23       	and	r24, r18
 108:	81 bb       	out	0x11, r24	; 17
			break;
 10a:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (port)
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	89 f0       	breq	.+34     	; 0x132 <DIO_SetPin_Direction+0xa0>
 110:	28 f0       	brcs	.+10     	; 0x11c <DIO_SetPin_Direction+0x8a>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	c9 f0       	breq	.+50     	; 0x148 <DIO_SetPin_Direction+0xb6>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	11 f1       	breq	.+68     	; 0x15e <DIO_SetPin_Direction+0xcc>
 11a:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 11c:	2a b3       	in	r18, 0x1a	; 26
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPin_Direction+0x96>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPin_Direction+0x92>
 12c:	82 2b       	or	r24, r18
 12e:	8a bb       	out	0x1a, r24	; 26
			break;
 130:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 132:	27 b3       	in	r18, 0x17	; 23
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_SetPin_Direction+0xac>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_SetPin_Direction+0xa8>
 142:	82 2b       	or	r24, r18
 144:	87 bb       	out	0x17, r24	; 23
			break;
 146:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 148:	24 b3       	in	r18, 0x14	; 20
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SetPin_Direction+0xc2>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SetPin_Direction+0xbe>
 158:	82 2b       	or	r24, r18
 15a:	84 bb       	out	0x14, r24	; 20
			break;
 15c:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 15e:	21 b3       	in	r18, 0x11	; 17
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_SetPin_Direction+0xd8>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_SetPin_Direction+0xd4>
 16e:	82 2b       	or	r24, r18
 170:	81 bb       	out	0x11, r24	; 17
 172:	08 95       	ret

00000174 <DIO_SetPin_State>:
		break;
	}
}
void DIO_SetPin_State(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	switch (state)
 174:	44 23       	and	r20, r20
 176:	19 f0       	breq	.+6      	; 0x17e <DIO_SetPin_State+0xa>
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	c9 f1       	breq	.+114    	; 0x1ee <DIO_SetPin_State+0x7a>
 17c:	08 95       	ret
	{
		case DIO_LOW:
		switch (port)
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	91 f0       	breq	.+36     	; 0x1a6 <DIO_SetPin_State+0x32>
 182:	28 f0       	brcs	.+10     	; 0x18e <DIO_SetPin_State+0x1a>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	d9 f0       	breq	.+54     	; 0x1be <DIO_SetPin_State+0x4a>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	29 f1       	breq	.+74     	; 0x1d6 <DIO_SetPin_State+0x62>
 18c:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_SetPin_State+0x26>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_SetPin_State+0x22>
 19e:	80 95       	com	r24
 1a0:	82 23       	and	r24, r18
 1a2:	8b bb       	out	0x1b, r24	; 27
			break;
 1a4:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 1a6:	28 b3       	in	r18, 0x18	; 24
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_SetPin_State+0x3e>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_SetPin_State+0x3a>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	88 bb       	out	0x18, r24	; 24
			break;
 1bc:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 1be:	25 b3       	in	r18, 0x15	; 21
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_SetPin_State+0x56>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_SetPin_State+0x52>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	85 bb       	out	0x15, r24	; 21
			break;
 1d4:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 1d6:	22 b3       	in	r18, 0x12	; 18
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_SetPin_State+0x6e>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_SetPin_State+0x6a>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	82 bb       	out	0x12, r24	; 18
			break;
 1ec:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (port)
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	89 f0       	breq	.+34     	; 0x214 <DIO_SetPin_State+0xa0>
 1f2:	28 f0       	brcs	.+10     	; 0x1fe <DIO_SetPin_State+0x8a>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	c9 f0       	breq	.+50     	; 0x22a <DIO_SetPin_State+0xb6>
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	11 f1       	breq	.+68     	; 0x240 <DIO_SetPin_State+0xcc>
 1fc:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 1fe:	2b b3       	in	r18, 0x1b	; 27
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_SetPin_State+0x96>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_SetPin_State+0x92>
 20e:	82 2b       	or	r24, r18
 210:	8b bb       	out	0x1b, r24	; 27
			break;
 212:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 214:	28 b3       	in	r18, 0x18	; 24
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_SetPin_State+0xac>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_SetPin_State+0xa8>
 224:	82 2b       	or	r24, r18
 226:	88 bb       	out	0x18, r24	; 24
			break;
 228:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 22a:	25 b3       	in	r18, 0x15	; 21
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_SetPin_State+0xc2>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_SetPin_State+0xbe>
 23a:	82 2b       	or	r24, r18
 23c:	85 bb       	out	0x15, r24	; 21
			break;
 23e:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 240:	22 b3       	in	r18, 0x12	; 18
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_SetPin_State+0xd8>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_SetPin_State+0xd4>
 250:	82 2b       	or	r24, r18
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret

00000256 <LCD_WRITE_CMD>:
void LCD_WRITE_NBR(uint32_t numbr)
{
	uint8_t num[10];
	ltoa(numbr, (uint8_t*)num, 10);//Long to Ascii
	LCD_WRITE_STR(num);
}
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	63 e0       	ldi	r22, 0x03	; 3
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 278:	8b b3       	in	r24, 0x1b	; 27
 27a:	9c 2f       	mov	r25, r28
 27c:	90 7f       	andi	r25, 0xF0	; 240
 27e:	8f 70       	andi	r24, 0x0F	; 15
 280:	89 2b       	or	r24, r25
 282:	8b bb       	out	0x1b, r24	; 27
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	63 e0       	ldi	r22, 0x03	; 3
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 28e:	8f e9       	ldi	r24, 0x9F	; 159
 290:	9f e0       	ldi	r25, 0x0F	; 15
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_WRITE_CMD+0x3c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_WRITE_CMD+0x42>
 298:	00 00       	nop
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	63 e0       	ldi	r22, 0x03	; 3
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 2a4:	20 e1       	ldi	r18, 0x10	; 16
 2a6:	c2 9f       	mul	r28, r18
 2a8:	c0 01       	movw	r24, r0
 2aa:	11 24       	eor	r1, r1
 2ac:	9b b3       	in	r25, 0x1b	; 27
 2ae:	9f 70       	andi	r25, 0x0F	; 15
 2b0:	89 2b       	or	r24, r25
 2b2:	8b bb       	out	0x1b, r24	; 27
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 2be:	8f e9       	ldi	r24, 0x9F	; 159
 2c0:	9f e0       	ldi	r25, 0x0F	; 15
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCD_WRITE_CMD+0x6c>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCD_WRITE_CMD+0x72>
 2c8:	00 00       	nop
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	63 e0       	ldi	r22, 0x03	; 3
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 2d4:	8f e3       	ldi	r24, 0x3F	; 63
 2d6:	9f e1       	ldi	r25, 0x1F	; 31
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <LCD_WRITE_CMD+0x82>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <LCD_WRITE_CMD+0x88>
 2de:	00 00       	nop
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <LCD_Init>:
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 2ee:	41 e0       	ldi	r20, 0x01	; 1
 2f0:	62 e0       	ldi	r22, 0x02	; 2
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	63 e0       	ldi	r22, 0x03	; 3
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 302:	41 e0       	ldi	r20, 0x01	; 1
 304:	64 e0       	ldi	r22, 0x04	; 4
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	65 e0       	ldi	r22, 0x05	; 5
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	66 e0       	ldi	r22, 0x06	; 6
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	67 e0       	ldi	r22, 0x07	; 7
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 32a:	2f ef       	ldi	r18, 0xFF	; 255
 32c:	81 ee       	ldi	r24, 0xE1	; 225
 32e:	94 e0       	ldi	r25, 0x04	; 4
 330:	21 50       	subi	r18, 0x01	; 1
 332:	80 40       	sbci	r24, 0x00	; 0
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <LCD_Init+0x4c>
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCD_Init+0x56>
 33a:	00 00       	nop
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WRITE_CMD>
 342:	83 e3       	ldi	r24, 0x33	; 51
 344:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WRITE_CMD>
 348:	82 e3       	ldi	r24, 0x32	; 50
 34a:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WRITE_CMD>
 34e:	88 e2       	ldi	r24, 0x28	; 40
 350:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WRITE_CMD>
 354:	8c e0       	ldi	r24, 0x0C	; 12
 356:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WRITE_CMD>
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WRITE_CMD>
 360:	86 e0       	ldi	r24, 0x06	; 6
 362:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WRITE_CMD>
 366:	08 95       	ret

00000368 <LCD_WRITE_DTA>:
 368:	cf 93       	push	r28
 36a:	c8 2f       	mov	r28, r24
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	62 e0       	ldi	r22, 0x02	; 2
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	63 e0       	ldi	r22, 0x03	; 3
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 38a:	8b b3       	in	r24, 0x1b	; 27
 38c:	9c 2f       	mov	r25, r28
 38e:	90 7f       	andi	r25, 0xF0	; 240
 390:	8f 70       	andi	r24, 0x0F	; 15
 392:	89 2b       	or	r24, r25
 394:	8b bb       	out	0x1b, r24	; 27
 396:	41 e0       	ldi	r20, 0x01	; 1
 398:	63 e0       	ldi	r22, 0x03	; 3
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 3a0:	8f e9       	ldi	r24, 0x9F	; 159
 3a2:	9f e0       	ldi	r25, 0x0F	; 15
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <LCD_WRITE_DTA+0x3c>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <LCD_WRITE_DTA+0x42>
 3aa:	00 00       	nop
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	63 e0       	ldi	r22, 0x03	; 3
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 3b6:	20 e1       	ldi	r18, 0x10	; 16
 3b8:	c2 9f       	mul	r28, r18
 3ba:	c0 01       	movw	r24, r0
 3bc:	11 24       	eor	r1, r1
 3be:	9b b3       	in	r25, 0x1b	; 27
 3c0:	9f 70       	andi	r25, 0x0F	; 15
 3c2:	89 2b       	or	r24, r25
 3c4:	8b bb       	out	0x1b, r24	; 27
 3c6:	41 e0       	ldi	r20, 0x01	; 1
 3c8:	63 e0       	ldi	r22, 0x03	; 3
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 3d0:	8f e9       	ldi	r24, 0x9F	; 159
 3d2:	9f e0       	ldi	r25, 0x0F	; 15
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <LCD_WRITE_DTA+0x6c>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <LCD_WRITE_DTA+0x72>
 3da:	00 00       	nop
 3dc:	40 e0       	ldi	r20, 0x00	; 0
 3de:	63 e0       	ldi	r22, 0x03	; 3
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 3e6:	8f e3       	ldi	r24, 0x3F	; 63
 3e8:	9f e1       	ldi	r25, 0x1F	; 31
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCD_WRITE_DTA+0x82>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCD_WRITE_DTA+0x88>
 3f0:	00 00       	nop
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <LCD_CLEAR>:
void LCD_CLEAR(void)/*Clear data display on screen*/
{
	LCD_WRITE_CMD(0x01);
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WRITE_CMD>
 3fc:	08 95       	ret

000003fe <main>:

int main(void)
{	
	
	uint8_t dta;
	USART_Init();
 3fe:	0e 94 2e 02 	call	0x45c	; 0x45c <USART_Init>
	SPI_Master_Init();
 402:	0e 94 1b 02 	call	0x436	; 0x436 <SPI_Master_Init>
	LCD_Init();
 406:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_Init>
	LCD_CLEAR();
 40a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_CLEAR>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40e:	8f e3       	ldi	r24, 0x3F	; 63
 410:	9c e9       	ldi	r25, 0x9C	; 156
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 418:	00 00       	nop
	
	while(1)
	{
		_delay_ms(10);
		dta=USART_Rec();
 41a:	0e 94 36 02 	call	0x46c	; 0x46c <USART_Rec>
 41e:	c8 2f       	mov	r28, r24
		if(dta!=0)
 420:	88 23       	and	r24, r24
 422:	a9 f3       	breq	.-22     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		{
			LCD_CLEAR();
 424:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_CLEAR>
			LCD_WRITE_DTA(dta);
 428:	8c 2f       	mov	r24, r28
 42a:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_WRITE_DTA>
			SPI_Trans(dta);
 42e:	8c 2f       	mov	r24, r28
 430:	0e 94 2a 02 	call	0x454	; 0x454 <SPI_Trans>
 434:	ec cf       	rjmp	.-40     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>

00000436 <SPI_Master_Init>:
	CLR_BIT(SPCR,CPOL);
	
	//set prescalar to 8 bit choose 101
	 SET_BIT(SPCR,SPR1); SET_BIT(SPCR,SPR0);
	*/
	SPCR=0b01000011;
 436:	87 b3       	in	r24, 0x17	; 23
 438:	80 61       	ori	r24, 0x10	; 16
 43a:	87 bb       	out	0x17, r24	; 23
 43c:	87 b3       	in	r24, 0x17	; 23
 43e:	80 62       	ori	r24, 0x20	; 32
 440:	87 bb       	out	0x17, r24	; 23
 442:	87 b3       	in	r24, 0x17	; 23
 444:	8f 7b       	andi	r24, 0xBF	; 191
 446:	87 bb       	out	0x17, r24	; 23
 448:	87 b3       	in	r24, 0x17	; 23
 44a:	80 68       	ori	r24, 0x80	; 128
 44c:	87 bb       	out	0x17, r24	; 23
 44e:	83 e5       	ldi	r24, 0x53	; 83
 450:	8d b9       	out	0x0d, r24	; 13
 452:	08 95       	ret

00000454 <SPI_Trans>:
}

void SPI_Trans(uint8_t data)
{
	SPDR=data;
 454:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 456:	77 9b       	sbis	0x0e, 7	; 14
 458:	fe cf       	rjmp	.-4      	; 0x456 <SPI_Trans+0x2>
}
 45a:	08 95       	ret

0000045c <USART_Init>:

void USART_Trans(uint8_t data)
{	UDR=data;
	while(GET_BIT(UCSRA,TXC)!=1);
	
}
 45c:	88 e1       	ldi	r24, 0x18	; 24
 45e:	8a b9       	out	0x0a, r24	; 10
 460:	86 e8       	ldi	r24, 0x86	; 134
 462:	80 bd       	out	0x20, r24	; 32
 464:	88 e6       	ldi	r24, 0x68	; 104
 466:	89 b9       	out	0x09, r24	; 9
 468:	10 bc       	out	0x20, r1	; 32
 46a:	08 95       	ret

0000046c <USART_Rec>:
uint8_t USART_Rec(void)
{	
	uint8_t data;
	while(GET_BIT(UCSRA,RXC)!=1);
 46c:	5f 9b       	sbis	0x0b, 7	; 11
 46e:	fe cf       	rjmp	.-4      	; 0x46c <USART_Rec>
	data=UDR;
 470:	8c b1       	in	r24, 0x0c	; 12
	return data;
	
}
 472:	08 95       	ret

00000474 <_exit>:
 474:	f8 94       	cli

00000476 <__stop_program>:
 476:	ff cf       	rjmp	.-2      	; 0x476 <__stop_program>
